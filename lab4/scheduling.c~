/*******************************************************************************
*
* CprE 308 Scheduling Lab
*
* scheduling.c
*******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define NUM_PROCESSES 20

#define MAX_INT 0x7FFFFFFF

struct process
{
  /* Values initialized for each process */
  int arrivaltime;  /* Time process arrives and wishes to start */
  int runtime;      /* Time process requires to complete job */
  int priority;     /* Priority of the process */

  /* Values algorithm may use to track processes */
  int starttime;
  int endtime;
  int flag;
  int remainingtime;
};

/* Forward declarations of Scheduling algorithms */
void first_come_first_served(struct process *proc);
void shortest_remaining_time(struct process *proc);
void round_robin(struct process *proc);
void round_robin_priority(struct process *proc);

//declare prototypes
void print_start(int index, int time);
void print_end(int index, int time);
void print_avg(int avg);

int main()
{
  int i;
  struct process proc[NUM_PROCESSES],      /* List of processes */
                 proc_copy[NUM_PROCESSES]; /* Backup copy of processes */

  /* Seed random number generator */
  /*srand(time(0));*/  /* Use this seed to test different scenarios */
  srand(0xC0FFEE);     /* Used for test to be printed out */

  /* Initialize process structures */
  for(i=0; i<NUM_PROCESSES; i++)
  {
    proc[i].arrivaltime = rand()%100;
    proc[i].runtime = (rand()%30)+10;
    proc[i].priority = rand()%3;
    proc[i].starttime = 0;
    proc[i].endtime = 0;
    proc[i].flag = 0;
    proc[i].remainingtime = proc[i].runtime;//0; //makes it easier on me
  }

  /* Show process values */
  printf("Process\tarrival\truntime\tpriority\n");
  for(i=0; i<NUM_PROCESSES; i++)
    printf("%d\t%d\t%d\t%d\n", i, proc[i].arrivaltime, proc[i].runtime,
           proc[i].priority);

  /* Run scheduling algorithms */
  printf("\n\nFirst come first served\n");
  memcpy(proc_copy, proc, NUM_PROCESSES * sizeof(struct process));
  first_come_first_served(proc_copy);

  printf("\n\nShortest remaining time\n");
  memcpy(proc_copy, proc, NUM_PROCESSES * sizeof(struct process));
  shortest_remaining_time(proc_copy);

  printf("\n\nRound Robin\n");
  memcpy(proc_copy, proc, NUM_PROCESSES * sizeof(struct process));
  round_robin(proc_copy);

  printf("\n\nRound Robin with priority\n");
  memcpy(proc_copy, proc, NUM_PROCESSES * sizeof(struct process));
  round_robin_priority(proc_copy);

  return 0;
}

void first_come_first_served(struct process *proc)
{
  /* Implement scheduling algorithm here */
    int time = 0;
    int done = 0;
    while(!done)
    {
        int i;
        int check = 1;
        int min = MAX_INT, min_found = -1;
        for(i=0; i<NUM_PROCESSES; i++)
        {
            if(proc[i].flag == 0) //check if there are unfinished processes
            {
                check = 0;
                if(proc[i].arrivaltime <= time && proc[i].arrivaltime < min)
                {
                    min = proc[i].arrivaltime;
                    min_found = i;
                }
            }
        }
        int time_d = time + ((min_found != -1) ? proc[min_found].runtime : 1);
        if(min_found != -1)
        {
            print_start(min_found,time);
            print_end(min_found,time_d);
            proc[min_found].flag = 1; 
            proc[min_found].starttime = time;
            proc[min_found].endtime = time_d;
        }
        time = time_d;
        done = check;
    }
    int avg = 0, i;
    for(i=0 ;i<NUM_PROCESSES; i++)
    {
        avg += proc[i].endtime - proc[i].arrivaltime;
    }
    print_avg(avg);
}

void shortest_remaining_time(struct process *proc)
{
  /* Implement scheduling algorithm here */
    int time = 0;
    int done = 0;
    while(!done)
    {
        int i;
        int check = 1;
        int min = MAX_INT, min_found = -1;
        for(i=0; i<NUM_PROCESSES; i++)
        {
            if(proc[i].flag == 0) //check if there are unfinished processes
            {
                check = 0;
                if(proc[i].arrivaltime <= time && proc[i].runtime < min)
                {
                    min = proc[i].runtime;
                    min_found = i;
                }
            }
        }
        int time_d = time + ((min_found != -1) ? proc[min_found].runtime : 1);
        if(min_found != -1)
        {
            print_start(min_found,time);
            print_end(min_found,time_d);
            proc[min_found].flag = 1; 
            proc[min_found].starttime = time;
            proc[min_found].endtime = time_d;
        }
        time = time_d;
        done = check;
    }
    int avg = 0, i;
    for(i=0 ;i<NUM_PROCESSES; i++)
    {
        avg += proc[i].endtime - proc[i].arrivaltime;
    }
    print_avg(avg);
}

void round_robin(struct process *proc)
{
  /* Implement scheduling algorithm here */
    int time = 0;
    int done = 0;
    while(!done)
    {
        int i;
        int check = 1;
        int found = 0;
        for(i=0; i<NUM_PROCESSES; i++)
        {
            if(proc[i].flag == 0) //check if there are unfinished processes
            {
                check = 0;
                if(proc[i].arrivaltime <= time)
                {
                    found = 1;
                    if(proc[i].runtime == proc[i].remainingtime)
                    {
                        print_start(i,time);
                        proc[i].starttime = time;
                    }
                    proc[i].remainingtime--;
                    time++;
                    if(proc[i].remainingtime == 0)
                    {
                        print_end(i,time);
                        proc[i].endtime = time;
                        proc[i].flag = 1;
                    }
                }
            }
        }
        if(!found) time++;
        done = check;
    }
    int avg = 0, i;
    for(i=0 ;i<NUM_PROCESSES; i++)
    {
        avg += proc[i].endtime - proc[i].arrivaltime;
    }
    print_avg(avg);
}

void round_robin_priority(struct process *proc)
{
  /* Implement scheduling algorithm here */
    int time = 0;
    int done = 0;
    int first = 1;
    while(!done)
    {
        int i;
        int check = 1;
        int found = 0;
        int j;
        for(i=0; i<NUM_PROCESSES; i++)
        {
            //have to do priority check after each time unit
            //each iteration of the outer loop simulates 1 time unit
            int highest_priority = 0;
            int last_priority;
            for(j=0; j<NUM_PROCESSES; j++)
            {
                if(proc[j].flag == 0 && proc[j].arrivaltime <= time)
                {
                    highest_priority = (proc[j].priority>highest_priority)?
                        proc[j].priority:highest_priority;
                }
            }
            /*
            according to andy, when priority is changed, processes are given
            time starting from the lowest index jobs, have to reset i.
            */
            if(!first)
            {
                if(last_priority != highest_priority)
                {
                    i=0;
                    //need to reset loop, without incrementing time on exit
                }
            }
            first = 0;
            last_priority = highest_priority;
            if(proc[i].flag == 0 && proc[i].priority == highest_priority)
            {
                check = 0;
                if(proc[i].arrivaltime <= time)
                {
                    found = 1;
                    if(proc[i].runtime == proc[i].remainingtime)
                    {
                        print_start(i,time);
                        proc[i].starttime = time;
                    }
                    proc[i].remainingtime--;
                    time++;
                    if(proc[i].remainingtime == 0)
                    {
                        print_end(i,time);
                        proc[i].endtime = time;
                        proc[i].flag = 1;
                    }
                }
            }
        }
        if(!found) time++;
        done = check;
    }   
    int avg = 0, i;
    for(i=0 ;i<NUM_PROCESSES; i++)
    {
        avg += proc[i].endtime - proc[i].arrivaltime;
    }
    print_avg(avg);
}

//sets the time to the earliest arrival time
int get_start_time(struct process *proc)
{
    int ret = MAX_INT; //integer maximum
    int i;
    for(i=0; i<NUM_PROCESSES; i++)
    {
        if((proc+i)->arrivaltime < ret)
        {
            ret = (proc+1)->arrivaltime;
        }
    }
    return ret;
}

void print_start(int index, int time)
{
    printf("Process %d started at time %d\n",index,time);
}

void print_end(int index, int time)
{
    printf("Process %d finished at time %d\n",index,time);
}

void print_avg(int sum)
{
    printf("Average time from arrival to finish is %d seconds\n",
        sum/NUM_PROCESSES);
}






















